library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- suppressMessages(train(diagnosis~., data=training, method="rf"))
gbmmodel <- suppressMessages(train(diagnosis~., data=training, method="gbm"))
ldamodel <- suppressMessages(train(diagnosis~., data=training, method="lda"))
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
# fit rf predictor relating the factor variable y
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
predRf <- predict(fitRf, vowel.test)
predGBM <- predict(fitGBM, vowel.test)
# RF Accuracy: 0.6060606
confusionMatrix(predRf, vowel.test$y)$overall[1]
# GBM Accuracy: 0.530303
confusionMatrix(predGBM, vowel.test$y)$overall[1]
pred <- data.frame(predRf, predGBM, y=vowel.test$y, agree=predRf == predGBM)
head(pred)
accuracy <- sum(predRf[pred$agree] == pred$y[pred$agree]) / sum(pred$agree)
accuracy # Agreement Accuracy: 0.6569579
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
xdg.xddc962433)
set.seed(62433)
proc.time()
currTime <- proc.time()
modRF <- train(diagnosis~., data=training,method="rf")
proc.time() - currTime
modGBM <- train(diagnosis~., data=training,method="gbm")
modLDA <- train(diagnosis~., data=training,method="lda")
summary(modLDA)
predictRF <- predict(modRF, testing)
predictGBM <- predict(modGBM, testing)
predictLDA <- predict(modLDA, testing)
summary(predictRF)
summary(predictGBM)
summary(predictLDA)
predictRF
confusionMatrix(predictRF,testing$diagnosis)
confusionMatrix(predictGBM,testing$diagnosis)
confusionMatrix(predictLDA,testing$diagnosis)
df_combined <- data.frame(predictRF, predictGBM, predictLDA, diagnosis = testing$diagnosis)
fit_combined <- train(diagnosis~., data=df_combined,method="rf")
predirctCB <- predict(fit_combined, testing)
predirctCB
confusionMatrix(predirctCB,testing$diagnosis)
print(paste(confusionMatrix(predictRF,testing$diagnosis)$overall[1],confusionMatrix(predictGBM,testing$diagnosis)$overall[1],confusionMatrix(predictLDA,testing$diagnosis)$overall[1],confusionMatrix(predictCB,testing$diagnosis)$overall[1]))
print(paste(confusionMatrix(predictRF,testing$diagnosis)$overall[1],confusionMatrix(predictGBM,testing$diagnosis)$overall[1],confusionMatrix(predictLDA,testing$diagnosis)$overall[1],confusionMatrix(predirctCB,testing$diagnosis)$overall[1]))
library(manipulate)
install.packages(manipulate)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myplot(s), s=slider(0,2,step=0.1))
manipulate(myPlot(s), s=slider(0,2,step=0.1))
manipulate(myPlot(s), x.s=slider(0,2,step=0.1))
manipulate(myPlot(s), slider(0,2,step=0.1))
manipulate(myPlot, s=slider(0,2,step=0.1))
manipulate(myPlot(s), s=slider(0,2,step=0.1))
install.packages("rCharts")
library(rCharts)
library(rCharts)
install.packages("rCharts")
library(devtools)
install.packages("devtools")
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
head(airquality)
airquality
require(rCharts)
library(devtools)
install.packages("Rtools")
require(devtools)
require(RTools)
install.packages("RTools")
library("devtools", lib.loc="C:/Program Files/R/R-3.2.1/library")
require(RCharts)
install.packages("rCharts)")
install.packages("rCharts")
install_github('ramnathv/rCharts')
install_github('ramnathv/rCharts')
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("RJSONIO")
install_github('ramnathv/rCharts')
require(devtools)
install_github('ramnathv/rCharts')
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shiny::runApp()
library(UsingR)
install.packages("UsingR")
library(UsingR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
runExample(("01_hello"))
list.files()
list.dir()
list.dirs()
mkdir("App-1")
dir.create("App-1")
setwd("D:/Dropbox/Coursera/App-1/")
getwd()
runApp("App-1")
setwd("D:/Dropbox/Coursera/")
runApp("App-1")
runApp("App-1")
data(Titanic)
data(Titanic)
dat <- Titanic
dat
summary(dat)
head(dat[1])
head(dat[2])
head(dat[3])
head(dat[4])
head(dat[5])
head(dat[1][1])
head(dat[1][2])
head(dat[1][3])
head(dat[1][10])
view(dat)
View(dat)
head(dat)
str(dat)
dat$Class <- factor(dat$Class)
data("ToothGrowth")
dat <- ToothGrowth
dat
summary(dat)
dat$supp <- factor(dat$supp)
summary(dat)
str(dat)
dat$dose <- factor(dat$dose)
str(dat)
data(ToothGrowth)
ToothGrowth$supp <- factor(ToothGrowth$supp)
ToothGrowth$dose <- factor(ToothGrowth$dose)
rm(dat)
LENModel <- lm(len ~ supp + dose, data=ToothGrowth)
summary(LENModel)
predict(LENModel, data.frame(supp=as.factor("OJ"),dose=as.factor(1.5)))
predict(LENModel, data.frame(supp=as.factor("OJ"),dose=as.factor(2)))
predict(LENModel, data.frame(supp=as.factor("OJ"),dose=as.factor(2.5)))
predict(LENModel, data.frame(supp=as.factor("OJ"),dose=as.factor(2)))
predict(LENModel, data.frame(supp=as.factor("OJ"),dose=as.factor(1)))
data(ToothGrowth)
LENModel <- lm(len ~ supp + dose, data=ToothGrowth)
predict(LENModel, data.frame(supp="OJ",dose=1))
View(ToothGrowth)
predict(LENModel, data.frame(supp="OJ",dose=1.5))
predict(LENModel, data.frame(supp="OJ",dose=1.7))
predict(LENModel, data.frame(supp="OJ",dose=1.8))
predict(LENModel, data.frame(supp="OJ",dose=1.9))
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
View(ToothGrowth)
shiny::runApp('App-1')
shiny::runApp('DevDataProduct')
shiny::runApp('DevDataProduct')
shiny::runApp('DevDataProduct')
shiny::runApp('DevDataProduct')
author("DevDataProduct/Presentation")
library(slidify)
author("DevDataProduct/Presentation")
shiny::runApp('D:/Dropbox/Coursera/DevDataProduct')
The response is the length of odontoblasts (teeth) in each of 10 guinea pigs at each of three dose levels of Vitamin C (0.5, 1, and 2 mg) with each of two delivery methods (orange juice or ascorbic acid).
head(ToothGrowth)
shiny::runApp('D:/Dropbox/Coursera/DevDataProduct')
file.edit('~/.Rprofile')
file.edit('~/.Rprofile')
